"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
// import type { NextConfig } from 'next/dist/server/config'
const path_1 = __importDefault(require("path"));
const getFrameworkType = (dir) => {
    const packageJson = JSON.parse(fs_1.default.readFileSync(path_1.default.join(dir, 'package.json'), 'utf8'));
    const deps = Object.assign(packageJson.devDependencies ?? {}, packageJson.dependencies ?? {});
    return deps.nuxt ? 'nuxtjs' : 'nextjs';
};
exports.default = async (enableStatic, output, igPath, dir = process.cwd()) => {
    const type = getFrameworkType(dir);
    const ignorePath = igPath && path_1.default.join(dir, igPath);
    if (type === 'nextjs') {
        let config; /*: NextConfig */
        try {
            // >= v11.1.0
            config = await require('next/dist/server/config').default(require('next/constants').PHASE_PRODUCTION_BUILD, dir);
        }
        catch (e) {
            // < v11.1.0
            config = await require('next/dist/next-server/server/config').default(require('next/constants').PHASE_PRODUCTION_BUILD, dir);
        }
        const srcDir = fs_1.default.existsSync(path_1.default.posix.join(dir, 'src/pages')) ||
            fs_1.default.existsSync(path_1.default.posix.join(dir, 'src/app'))
            ? path_1.default.posix.join(dir, 'src')
            : dir;
        const isAppDirUsed = fs_1.default.existsSync(path_1.default.posix.join(srcDir, 'app'));
        if (!output) {
            const utilsPath = path_1.default.join(srcDir, 'utils');
            output = fs_1.default.existsSync(utilsPath) ? utilsPath : path_1.default.join(srcDir, 'lib');
        }
        if (!fs_1.default.existsSync(output))
            fs_1.default.mkdirSync(output);
        const inputDir = path_1.default.posix.join(srcDir, 'pages');
        return {
            type,
            input: fs_1.default.existsSync(inputDir) ? inputDir : undefined,
            staticDir: enableStatic ? path_1.default.posix.join(dir, 'public') : undefined,
            output,
            ignorePath,
            appDir: isAppDirUsed ? { input: path_1.default.posix.join(srcDir, 'app') } : undefined,
            pageExtensions: config.pageExtensions,
            basepath: config.basePath
        };
    }
    else {
        const nuxttsPath = path_1.default.join(dir, 'nuxt.config.ts');
        const config = await require('@nuxt/config').loadNuxtConfig({
            rootDir: dir,
            configFile: fs_1.default.existsSync(nuxttsPath) ? nuxttsPath : undefined
        });
        const srcDir = path_1.default.posix.join(dir, config.srcDir ?? '');
        output = output ?? path_1.default.posix.join(srcDir, 'plugins');
        if (!fs_1.default.existsSync(output))
            fs_1.default.mkdirSync(output);
        return {
            type,
            input: path_1.default.posix.join(srcDir, 'pages'),
            staticDir: enableStatic ? path_1.default.posix.join(srcDir, 'static') : undefined,
            output,
            ignorePath,
            trailingSlash: config.router?.trailingSlash,
            basepath: config.router?.base
        };
    }
};
//# sourceMappingURL=getConfig.js.map