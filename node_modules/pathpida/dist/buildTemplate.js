"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resetCache = void 0;
const path_1 = __importDefault(require("path"));
const createNuxtTemplate_1 = require("./createNuxtTemplate");
const createStaticTemplate_1 = require("./createStaticTemplate");
const createNextTemplate_1 = require("./nextjs/createNextTemplate");
let prevPagesText = '';
let prevStaticText = '';
const resetCache = () => {
    prevPagesText = '';
    prevStaticText = '';
};
exports.resetCache = resetCache;
exports.default = ({ type, input, staticDir, output, ignorePath, trailingSlash, basepath, pageExtensions, appDir }, mode) => {
    const emptyPathRegExp = /\n.+{\n+ +}.*/;
    if (mode !== 'static') {
        let text = '';
        switch (type) {
            case 'nextjs':
                text = (0, createNextTemplate_1.createNextTemplate)(input, output, ignorePath, appDir, pageExtensions);
                break;
            case 'nuxtjs':
                text = (0, createNuxtTemplate_1.createNuxtTemplate)(input, output, ignorePath, trailingSlash);
                break;
        }
        while (emptyPathRegExp.test(text)) {
            text = text.replace(emptyPathRegExp, '');
        }
        prevPagesText = text;
    }
    if (staticDir && mode !== 'pages') {
        let text = (0, createStaticTemplate_1.createStaticTemplate)(staticDir, basepath, ignorePath);
        while (emptyPathRegExp.test(text)) {
            text = text.replace(emptyPathRegExp, '');
        }
        prevStaticText = text;
    }
    return {
        text: `${prevPagesText}${prevStaticText}${type === 'nuxtjs'
            ? `
declare module 'vue/types/vue' {
  interface Vue {
    $pagesPath: PagesPath${prevStaticText ? '\n    $staticPath: StaticPath' : ''}
  }
};

declare module '@nuxt/types' {
  interface NuxtAppOptions {
    $pagesPath: PagesPath${prevStaticText ? '\n    $staticPath: StaticPath' : ''}
  }

  interface Context {
    $pagesPath: PagesPath${prevStaticText ? '\n    $staticPath: StaticPath' : ''}
  }
};

declare module 'vuex/types/index' {
  interface Store<S> {
    $pagesPath: PagesPath${prevStaticText ? '\n    $staticPath: StaticPath' : ''}
  }
};

const pathPlugin: Plugin = (_, inject) => {
  inject('pagesPath', pagesPath);${prevStaticText ? "\n  inject('staticPath', staticPath);" : ''}
};

export default pathPlugin;
`
            : ''}`,
        filePath: path_1.default.posix.join(output, '$path.ts')
    };
};
//# sourceMappingURL=buildTemplate.js.map